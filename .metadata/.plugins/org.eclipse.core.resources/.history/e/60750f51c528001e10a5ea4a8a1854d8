package com.codsoft.internship.task5;

import java.io.BufferedReader;
import java.io.InputStreamReader;

class AddressBookConsoleUI
{
	private AddressBook addressBook;

	public AddressBookConsoleUI()
	{
		addressBook = new AddressBook();
	}

	public void displayMenu()
	{
		System.out.println("------ Address Book System ------");
		System.out.println("1. Add Contact");
		System.out.println("2. Remove Contact");
		System.out.println("3. Search Contact");
		System.out.println("4. Display All Contacts");
		System.out.println("5. Exit");

		System.out.print("\n Enter your choice : ");
	}

	public void processUserInput() throws Exception
	{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		boolean isRunning = true;

		while(isRunning)
		{
			displayMenu();

			int choice = Integer.parseInt(br.readLine());

			switch(choice)
			{
				case 1:
						addContact();
						break;

				case 2:
						removeContact();
						break;

				case 3:
						searchContact();
						break;

				case 4:
						displayAllContacts();
						break;

				case 5:
						isRunning = false;
						System.out.println("Address Book System is closed.");
						break;

				default:
						System.out.println("Invalid Choice. Please try again.");
			}
		}
	}

	public void addContact() throws Exception
	{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		System.out.println("------ Add Contact ------");
		System.out.print("Enter the name : ");
		String name = br.readLine();

		System.out.print("Enter the phone number : ");
		String phoneNumber = br.readLine();

		System.out.print("Enter the email address : ");
		String emailAddress = br.readLine();

		Contact contact = new Contact(name,phoneNumber,emailAddress);
		addressBook.addContact(contact);

		System.out.println("Contact added successfully.");
	}

	public void removeContact() throws Exception
	{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		System.out.println("------ Remove Contact ------");
		System.out.print("Enter the name to remove : ");
		String name = br.readLine();

		Contact foundContact = addressBook.searchContactByName(name);
		if(foundContact != null)
		{
			addressBook.removeContact(foundContact);
			System.out.println("Contact removed Successfully.");
		}
		else
		{
			System.out.println("Contact not found.");
		}
	}

	public void searchContact() throws Exception
	{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		System.out.println("------ Search Contact ------");
		System.out.print("Enter the name to search : ");
		String name = br.readLine();

		Contact foundContact = addressBook.searchContactByName(name);
		if(foundContact != null)
		{
			System.out.println("Contact Found : ");
			displayContactDetails(foundContact);
		}
		else
		{
			System.out.println("Contact not found.");
		}
	}

	public void displayAllContacts()
	{
		System.out.println("------ All Contacts ------");
		for(Contact contact : addressBook.getAllContacts())
		{
			displayContactDetails(contact);
		}
	}

	public void displayContactDetails(Contact contact)
	{
		System.out.println("Name : " + contact.getName());
		System.out.println("Phone Number : " + contact.getPhoneNumber());
		System.out.println("Email Address : " + contact.getEmailAddress());
		System.out.println();
	}

	public static void main(String args[]) throws Exception
	{
		AddressBookConsoleUI consoleUI = new AddressBookConsoleUI();
		consoleUI.processUserInput();
	}
}